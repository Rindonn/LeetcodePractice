/*
有效括号字符串为空 ("")、"(" + A + ")" 或 A + B，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。例如，""，"()"，"(())()" 和 "(()(()))" 都是有效的括号字符串。

如果有效字符串 S 非空，且不存在将其拆分为 S = A+B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。

给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 + ... + P_k，其中 P_i 是有效括号字符串原语。

对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。

 

示例 1：

输入："(()())(())"
输出："()()()"
解释：
输入字符串为 "(()())(())"，原语化分解得到 "(()())" + "(())"，
删除每个部分中的最外层括号后得到 "()()" + "()" = "()()()"。
示例 2：

输入："(()())(())(()(()))"
输出："()()()()(())"
解释：
输入字符串为 "(()())(())(()(()))"，原语化分解得到 "(()())" + "(())" + "(()(()))"，
删除每隔部分中的最外层括号后得到 "()()" + "()" + "()(())" = "()()()()(())"。
示例 3：

输入："()()"
输出：""
解释：
输入字符串为 "()()"，原语化分解得到 "()" + "()"，
删除每个部分中的最外层括号后得到 "" + "" = ""。
 

提示：

S.length <= 10000
S[i] 为 "(" 或 ")"
S 是一个有效括号字符串
*/
#include<iostream>
using namespace std;
class Solution {
public:
    string removeOuterParentheses(string S) {
        int num=0;
        string result="";
        int start=1,end=0;
        for(int i=0;i<S.length();i++){
            if(S[i]=='(')
                num++;
            else
                num--;
            if(num==0){//分解第一部分
                end=i;//标记结束位置
                result = result + S.substr(start,end-start);//拼接字符串  这里用+=可以明显减少内存消耗
                //cout<<start<<" | "<<end<<" | "<<S.substr(start,end-start)<<endl;
                start=end+2;//继续进行
            }
        }
        return result;
    }
};
int main(){
    Solution s ;
    s.removeOuterParentheses("(()())(())(()(()))");
    return 0;
}
/*
思路：通过记录括号匹配来进行分解，每当num==0时说明这一段的括号是匹配的，这时把起始位置字符，最终位置字符
中间的串取出来拼接到结果集里面即可
参考了题解

执行结果：
通过
显示详情
执行用时 :
20 ms
, 在所有 C++ 提交中击败了
12.51%
的用户
内存消耗 :
48.5 MB
, 在所有 C++ 提交中击败了
8.62%
的用户
*/